name: Notify

on:
  push:
    branches-ignore:
      - latest


jobs:
     Notify:
      runs-on: ubuntu-latest
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      steps:
        
        - name: Check for Issues
          run: |
            gh issue list --repo Grants52/hello-world-appgs -l '⏱ Awaiting triage'
            
        # - name: Get version from package.json after release step
        #   id: initversion
        #   run: |
        #     echo "::set-output name=version::$(( gh issue list --repo Grants52/hello-world-appgs -l '⏱ Awaiting triage' ) 2>&1)"

        # - name: Check for Issues2
        #   run: |
        #     echo "the initial version is ${{steps.initversion.outputs.version}}"

        - name: Send slack message for triage issues
          env:
             TRIAGE_URL: https://github.com/Grants52/hello-world-appgs/issues?q=is%3Aissue+is%3Aopen+label%3A%22%E2%8F%B1+Awaiting+triage%22
          run: |
            
            result=$(( gh issue list --repo Grants52/hello-world-appgs -l '⏱ Awaiting triage' ) 2>&1)
            
            slack_triage () {
            curl -X POST -H 'Content-type: application/json' --data '{"text":"There are <'$TRIAGE_URL'|Triage issues> to review this morning"}'  ${{ secrets.SLACK_TOKEN }}
            }
            slack_notriage () {
            curl -X POST -H 'Content-type: application/json' --data '{"text":"There are no issues to Triage this morning"}' ${{ secrets.SLACK_TOKEN }}
            }          
            
            if [[  `echo $result` == *"Awaiting triage"* ]]; then slack_triage ; else slack_notriage; fi
            
            #curl -X POST -H 'Content-type: application/json' --data '{"text":"testing"}' ${{ secrets.SLACK_TOKEN }}
        
        - name: Send slack message for stale issues
          env:
             STALE_URL: https://github.com/Grants52/hello-world-appgs/issues?q=is%3Aissue+is%3Aopen+label%3A%22Status%3A+Stale%22
          run: |
            
            result=$(( gh issue list --repo Grants52/hello-world-appgs -l 'Status: Stale' ) 2>&1)
            
            slack_stale () {
            curl -X POST -H 'Content-type: application/json' --data '{"text":"There are <'$STALE_URL'|Stale issues> to review this morning"}'  ${{ secrets.SLACK_TOKEN }}
            }
            slack_nostale () {
            curl -X POST -H 'Content-type: application/json' --data '{"text":"There are no Stale issues to this morning"}' ${{ secrets.SLACK_TOKEN }}
            }          
            
            if [[  `echo $result` == *"Status: Stale"* ]]; then slack_stale ; else slack_nostale; fi
            
            